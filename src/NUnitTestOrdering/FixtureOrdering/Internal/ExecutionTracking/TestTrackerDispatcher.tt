<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// ******************************************************************************
//  © 2016 Sebastiaan Dammann - damsteen.nl
// 
//  File:           : Test.cs
//  Project         : NUnitTestOrdering.Tests
// ******************************************************************************
<# 
    string[] types = new [] {
		"TestMethod",

		"OrderedTestSpecificationFixture",
		"TestFixture",
	};
#>

// <autogenerated>
// This file is generated by <#=Path.GetFileName(Host.TemplateFile)#>. Any changes will be lost
// when the file is regenerated. Do not edit this file.
// </autogenerated>

namespace NUnitTestOrdering.FixtureOrdering.Internal.ExecutionTracking {
    using NUnit.Framework;
    using NUnit.Framework.Interfaces;
    using NUnit.Framework.Internal;

    internal sealed class TestTrackerDispatcher {
<# foreach (string type in types) {#>
		private readonly ITestTracker<<#=type#>> <#=FieldName(type)#>;
<# } #>

        public TestTrackerDispatcher(TestExecutionTrackingContext trackingContext) {
<# foreach (string type in types) {#>
            this.<#=FieldName(type)#> = new <#=HandlerName(type)#>(trackingContext);
<# } #>
        }

        public void TrackExecution(ITest test, TestContext currentTestContext) {
<# foreach (string type in types) {#>
            {
                <#=type#> fixture = test as <#=type#>;

                if (fixture != null) {
                    this.<#=FieldName(type)#>.TrackExecution(fixture, currentTestContext);
                    return;
                }
            }
<# } #>
        }

        public void HandleTestStart(ITest test, TestExecutionContext executionContext) {
<# foreach (string type in types) {#>
            {
                <#=type#> fixture = test as <#=type#>;

                if (fixture != null) {
                    this.<#=FieldName(type)#>.HandleTestStart(fixture, executionContext);
                    return;
                }
            }
<# } #>
        }
    }
}

<#+

private static string CamelCase(string name) {
    char firstChar = Char.ToLower(name[0]);
	return firstChar + name.Substring(1);
}

private static string HandlerName(string name) {
	return name + "ExecutionTracker";
}

private static string FieldName(string name) {
	return "_" + CamelCase(HandlerName(name));
}

#>